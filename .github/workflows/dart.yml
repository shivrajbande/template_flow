name: Build Flutter APK's and App bundle

on:
  workflow_dispatch:
    inputs:
      client_name: 
        description: 'Client Name'
        required: true
        type: string
      client_id: 
        description: 'Client Id for Identifying Unique User'
        required: true
        type: string
      project_id:
        description: 'Project ID for indexing in DB for the build'
        required: true
        type: string
      project_name:
        description: 'Project Name for Identifying'
        required: true
        type: string
      package_name:
        description: 'Package name for the build'
        required: true
        type: string
      app_name:
        description: 'App Name/Label'
        required: true
        type: string
      client_email:
        description: "Email Ids of the Client"
        required: true 
        type: string        

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PUB_CACHE: ${{ github.workspace }}/.pub-cache

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            **/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: '3.13.6'

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.PUB_CACHE }}
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - run: 
          yes | flutter doctor --android-licenses
          flutter doctor -v

      - name: Install Flutter dependencies
        run: 
          flutter pub get

      - name: Create 'apk' Folder if Not Exist
        run: mkdir -p apk

      - name: Create APK Config JSON
        run: |
          echo '{
            "client_name": "${{inputs.client_name}}",
            "client_id": "${{inputs.client_id}}",
            "project_id": "${{ inputs.project_id }}",
            "package_name": "${{ inputs.package_name }}",
            "app_name": "${{ inputs.app_name }}"
            "project_name": "${{ inputs.project_name }}"
          }' > assets/json/code.json
          git checkout master
          git config user.name "hemos811"
          git config user.email "811.hemanthkumar@gmail.com"
          git add assets/json/code.json
          git commit -m "Added code.json using WorkFlow"
          git config pull.rebase true
          git pull origin master
          git push origin master


      - name: Show Code JSON File
        run: cat assets/json/code.json

      - name: Use Input Values
        run: |
          PACKAGE_NAME="${{ inputs.package_name }}"
          APP_NAME="${{ inputs.app_name }}"
          echo "Using package name provided in workflow dispatch: $PACKAGE_NAME"
          echo "Using app name provided in workflow dispatch: $APP_NAME"
          dart run rename_app:main all="$APP_NAME"
          flutter pub run change_app_package_name:main "$PACKAGE_NAME"
          git checkout master
          git add .
          git status
          git branch
          flutter doctor -v

      - name: Build APK
        run: |
          flutter build apk --release

      - name: Move APK Files to 'apk' Folder
        run: mv build/app/outputs/apk/release/app-release.apk apk/

      - name: List Changed Files
        run: git status

      - name: List Staged Files
        run: git diff --cached --name-only

      - name: Commit APKs to Repository
        run: |
          git checkout master
          git add apk/*.apk
          git commit -m "Added Changed APK files"
          git pull origin master
          git push origin master

     
      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: apks
          path: apk/*.apk
          retention-days: 5
      - name: Send email with Nightly APK link
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SENDER_MAIL }}
          password: ${{ secrets.MAIL_TRIGGER_APP_PASSWORD }}
          subject: "Nightly APK Build on ${{ github.repository }}: Success"
          body: |
              Workflow: ${{ github.workflow }}
              Repository: ${{ github.repository }}
              Status: Success
              APK Download Link:  https://nightly.link/${{ github.repository }}/actions/runs/${{ github.run_id }}/apks.zip
          to: ${{ secrets.CLIENT_MAIL_ADDRESS1 }}
          cc: ${{ inputs.client_email }}
          bcc: ${{ secrets.CLIENT_MAIL_ADDRESS3 }}
          from: ${{ secrets.SENDER_MAIL }}
  

          